// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: geyser.proto

#include "geyser.pb.h"
#include "geyser.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace geyser {

static const char* Geyser_method_names[] = {
  "/geyser.Geyser/Subscribe",
  "/geyser.Geyser/SubscribeReplayInfo",
  "/geyser.Geyser/Ping",
  "/geyser.Geyser/GetLatestBlockhash",
  "/geyser.Geyser/GetBlockHeight",
  "/geyser.Geyser/GetSlot",
  "/geyser.Geyser/IsBlockhashValid",
  "/geyser.Geyser/GetVersion",
};

std::unique_ptr< Geyser::Stub> Geyser::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Geyser::Stub> stub(new Geyser::Stub(channel, options));
  return stub;
}

Geyser::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(Geyser_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SubscribeReplayInfo_(Geyser_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(Geyser_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLatestBlockhash_(Geyser_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockHeight_(Geyser_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSlot_(Geyser_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsBlockhashValid_(Geyser_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersion_(Geyser_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::geyser::SubscribeRequest, ::geyser::SubscribeUpdate>* Geyser::Stub::SubscribeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::geyser::SubscribeRequest, ::geyser::SubscribeUpdate>::Create(channel_.get(), rpcmethod_Subscribe_, context);
}

void Geyser::Stub::async::Subscribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::geyser::SubscribeRequest,::geyser::SubscribeUpdate>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::geyser::SubscribeRequest,::geyser::SubscribeUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::geyser::SubscribeRequest, ::geyser::SubscribeUpdate>* Geyser::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::geyser::SubscribeRequest, ::geyser::SubscribeUpdate>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::geyser::SubscribeRequest, ::geyser::SubscribeUpdate>* Geyser::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::geyser::SubscribeRequest, ::geyser::SubscribeUpdate>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, false, nullptr);
}

::grpc::Status Geyser::Stub::SubscribeReplayInfo(::grpc::ClientContext* context, const ::geyser::SubscribeReplayInfoRequest& request, ::geyser::SubscribeReplayInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::geyser::SubscribeReplayInfoRequest, ::geyser::SubscribeReplayInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubscribeReplayInfo_, context, request, response);
}

void Geyser::Stub::async::SubscribeReplayInfo(::grpc::ClientContext* context, const ::geyser::SubscribeReplayInfoRequest* request, ::geyser::SubscribeReplayInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::geyser::SubscribeReplayInfoRequest, ::geyser::SubscribeReplayInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubscribeReplayInfo_, context, request, response, std::move(f));
}

void Geyser::Stub::async::SubscribeReplayInfo(::grpc::ClientContext* context, const ::geyser::SubscribeReplayInfoRequest* request, ::geyser::SubscribeReplayInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubscribeReplayInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::geyser::SubscribeReplayInfoResponse>* Geyser::Stub::PrepareAsyncSubscribeReplayInfoRaw(::grpc::ClientContext* context, const ::geyser::SubscribeReplayInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::geyser::SubscribeReplayInfoResponse, ::geyser::SubscribeReplayInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubscribeReplayInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::geyser::SubscribeReplayInfoResponse>* Geyser::Stub::AsyncSubscribeReplayInfoRaw(::grpc::ClientContext* context, const ::geyser::SubscribeReplayInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubscribeReplayInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Geyser::Stub::Ping(::grpc::ClientContext* context, const ::geyser::PingRequest& request, ::geyser::PongResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::geyser::PingRequest, ::geyser::PongResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void Geyser::Stub::async::Ping(::grpc::ClientContext* context, const ::geyser::PingRequest* request, ::geyser::PongResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::geyser::PingRequest, ::geyser::PongResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void Geyser::Stub::async::Ping(::grpc::ClientContext* context, const ::geyser::PingRequest* request, ::geyser::PongResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::geyser::PongResponse>* Geyser::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::geyser::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::geyser::PongResponse, ::geyser::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::geyser::PongResponse>* Geyser::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::geyser::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Geyser::Stub::GetLatestBlockhash(::grpc::ClientContext* context, const ::geyser::GetLatestBlockhashRequest& request, ::geyser::GetLatestBlockhashResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::geyser::GetLatestBlockhashRequest, ::geyser::GetLatestBlockhashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLatestBlockhash_, context, request, response);
}

void Geyser::Stub::async::GetLatestBlockhash(::grpc::ClientContext* context, const ::geyser::GetLatestBlockhashRequest* request, ::geyser::GetLatestBlockhashResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::geyser::GetLatestBlockhashRequest, ::geyser::GetLatestBlockhashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestBlockhash_, context, request, response, std::move(f));
}

void Geyser::Stub::async::GetLatestBlockhash(::grpc::ClientContext* context, const ::geyser::GetLatestBlockhashRequest* request, ::geyser::GetLatestBlockhashResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestBlockhash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::geyser::GetLatestBlockhashResponse>* Geyser::Stub::PrepareAsyncGetLatestBlockhashRaw(::grpc::ClientContext* context, const ::geyser::GetLatestBlockhashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::geyser::GetLatestBlockhashResponse, ::geyser::GetLatestBlockhashRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLatestBlockhash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::geyser::GetLatestBlockhashResponse>* Geyser::Stub::AsyncGetLatestBlockhashRaw(::grpc::ClientContext* context, const ::geyser::GetLatestBlockhashRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLatestBlockhashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Geyser::Stub::GetBlockHeight(::grpc::ClientContext* context, const ::geyser::GetBlockHeightRequest& request, ::geyser::GetBlockHeightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::geyser::GetBlockHeightRequest, ::geyser::GetBlockHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockHeight_, context, request, response);
}

void Geyser::Stub::async::GetBlockHeight(::grpc::ClientContext* context, const ::geyser::GetBlockHeightRequest* request, ::geyser::GetBlockHeightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::geyser::GetBlockHeightRequest, ::geyser::GetBlockHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeight_, context, request, response, std::move(f));
}

void Geyser::Stub::async::GetBlockHeight(::grpc::ClientContext* context, const ::geyser::GetBlockHeightRequest* request, ::geyser::GetBlockHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::geyser::GetBlockHeightResponse>* Geyser::Stub::PrepareAsyncGetBlockHeightRaw(::grpc::ClientContext* context, const ::geyser::GetBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::geyser::GetBlockHeightResponse, ::geyser::GetBlockHeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockHeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::geyser::GetBlockHeightResponse>* Geyser::Stub::AsyncGetBlockHeightRaw(::grpc::ClientContext* context, const ::geyser::GetBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockHeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Geyser::Stub::GetSlot(::grpc::ClientContext* context, const ::geyser::GetSlotRequest& request, ::geyser::GetSlotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::geyser::GetSlotRequest, ::geyser::GetSlotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSlot_, context, request, response);
}

void Geyser::Stub::async::GetSlot(::grpc::ClientContext* context, const ::geyser::GetSlotRequest* request, ::geyser::GetSlotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::geyser::GetSlotRequest, ::geyser::GetSlotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlot_, context, request, response, std::move(f));
}

void Geyser::Stub::async::GetSlot(::grpc::ClientContext* context, const ::geyser::GetSlotRequest* request, ::geyser::GetSlotResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::geyser::GetSlotResponse>* Geyser::Stub::PrepareAsyncGetSlotRaw(::grpc::ClientContext* context, const ::geyser::GetSlotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::geyser::GetSlotResponse, ::geyser::GetSlotRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSlot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::geyser::GetSlotResponse>* Geyser::Stub::AsyncGetSlotRaw(::grpc::ClientContext* context, const ::geyser::GetSlotRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSlotRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Geyser::Stub::IsBlockhashValid(::grpc::ClientContext* context, const ::geyser::IsBlockhashValidRequest& request, ::geyser::IsBlockhashValidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::geyser::IsBlockhashValidRequest, ::geyser::IsBlockhashValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsBlockhashValid_, context, request, response);
}

void Geyser::Stub::async::IsBlockhashValid(::grpc::ClientContext* context, const ::geyser::IsBlockhashValidRequest* request, ::geyser::IsBlockhashValidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::geyser::IsBlockhashValidRequest, ::geyser::IsBlockhashValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsBlockhashValid_, context, request, response, std::move(f));
}

void Geyser::Stub::async::IsBlockhashValid(::grpc::ClientContext* context, const ::geyser::IsBlockhashValidRequest* request, ::geyser::IsBlockhashValidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsBlockhashValid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::geyser::IsBlockhashValidResponse>* Geyser::Stub::PrepareAsyncIsBlockhashValidRaw(::grpc::ClientContext* context, const ::geyser::IsBlockhashValidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::geyser::IsBlockhashValidResponse, ::geyser::IsBlockhashValidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsBlockhashValid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::geyser::IsBlockhashValidResponse>* Geyser::Stub::AsyncIsBlockhashValidRaw(::grpc::ClientContext* context, const ::geyser::IsBlockhashValidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsBlockhashValidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Geyser::Stub::GetVersion(::grpc::ClientContext* context, const ::geyser::GetVersionRequest& request, ::geyser::GetVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::geyser::GetVersionRequest, ::geyser::GetVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void Geyser::Stub::async::GetVersion(::grpc::ClientContext* context, const ::geyser::GetVersionRequest* request, ::geyser::GetVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::geyser::GetVersionRequest, ::geyser::GetVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void Geyser::Stub::async::GetVersion(::grpc::ClientContext* context, const ::geyser::GetVersionRequest* request, ::geyser::GetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::geyser::GetVersionResponse>* Geyser::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::geyser::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::geyser::GetVersionResponse, ::geyser::GetVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::geyser::GetVersionResponse>* Geyser::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::geyser::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

Geyser::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Geyser_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Geyser::Service, ::geyser::SubscribeRequest, ::geyser::SubscribeUpdate>(
          [](Geyser::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::geyser::SubscribeUpdate,
             ::geyser::SubscribeRequest>* stream) {
               return service->Subscribe(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Geyser_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Geyser::Service, ::geyser::SubscribeReplayInfoRequest, ::geyser::SubscribeReplayInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Geyser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::geyser::SubscribeReplayInfoRequest* req,
             ::geyser::SubscribeReplayInfoResponse* resp) {
               return service->SubscribeReplayInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Geyser_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Geyser::Service, ::geyser::PingRequest, ::geyser::PongResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Geyser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::geyser::PingRequest* req,
             ::geyser::PongResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Geyser_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Geyser::Service, ::geyser::GetLatestBlockhashRequest, ::geyser::GetLatestBlockhashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Geyser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::geyser::GetLatestBlockhashRequest* req,
             ::geyser::GetLatestBlockhashResponse* resp) {
               return service->GetLatestBlockhash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Geyser_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Geyser::Service, ::geyser::GetBlockHeightRequest, ::geyser::GetBlockHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Geyser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::geyser::GetBlockHeightRequest* req,
             ::geyser::GetBlockHeightResponse* resp) {
               return service->GetBlockHeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Geyser_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Geyser::Service, ::geyser::GetSlotRequest, ::geyser::GetSlotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Geyser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::geyser::GetSlotRequest* req,
             ::geyser::GetSlotResponse* resp) {
               return service->GetSlot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Geyser_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Geyser::Service, ::geyser::IsBlockhashValidRequest, ::geyser::IsBlockhashValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Geyser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::geyser::IsBlockhashValidRequest* req,
             ::geyser::IsBlockhashValidResponse* resp) {
               return service->IsBlockhashValid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Geyser_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Geyser::Service, ::geyser::GetVersionRequest, ::geyser::GetVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Geyser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::geyser::GetVersionRequest* req,
             ::geyser::GetVersionResponse* resp) {
               return service->GetVersion(ctx, req, resp);
             }, this)));
}

Geyser::Service::~Service() {
}

::grpc::Status Geyser::Service::Subscribe(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::geyser::SubscribeUpdate, ::geyser::SubscribeRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Geyser::Service::SubscribeReplayInfo(::grpc::ServerContext* context, const ::geyser::SubscribeReplayInfoRequest* request, ::geyser::SubscribeReplayInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Geyser::Service::Ping(::grpc::ServerContext* context, const ::geyser::PingRequest* request, ::geyser::PongResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Geyser::Service::GetLatestBlockhash(::grpc::ServerContext* context, const ::geyser::GetLatestBlockhashRequest* request, ::geyser::GetLatestBlockhashResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Geyser::Service::GetBlockHeight(::grpc::ServerContext* context, const ::geyser::GetBlockHeightRequest* request, ::geyser::GetBlockHeightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Geyser::Service::GetSlot(::grpc::ServerContext* context, const ::geyser::GetSlotRequest* request, ::geyser::GetSlotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Geyser::Service::IsBlockhashValid(::grpc::ServerContext* context, const ::geyser::IsBlockhashValidRequest* request, ::geyser::IsBlockhashValidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Geyser::Service::GetVersion(::grpc::ServerContext* context, const ::geyser::GetVersionRequest* request, ::geyser::GetVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace geyser
#include <grpcpp/ports_undef.inc>

